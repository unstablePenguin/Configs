# Reload configuration
bind r source-file ~/.tmux.conf \; display-message "Reloaded!"


set -g prefix C-a      # Set Prefix to Ctrl + a 
unbind C-b             # Remove the old prefix
bind-key a send-prefix # Add compatability with screen

#source-file ~/Configs/custom.tmux.conf
set -g editor "vim"
set -g history-limit 100000              # Set large scrollback history
set -g exit-empty off                    # Don't exit server when no seesions
set -g detach-on-destroy off             # Don't exit server if no clients are attached
set -sa terminal-overrides ",xterm*:Tc"  # Set True Color

set -s escape-time 10             # Allows for faster key repetition
set -g display-time 2000          # Display messages for longer
set -g set-titles on              # Set Terminal title
set -g set-titles-string '#S:#I:#W - "#T" #{session_alerts}'    # String to set terminal title to

# Status Options
set -g status-interval 5         # Refresh status more often
set -g status-position top       # Move status to top
set -g status-bg colour233       # Set status color colour124 232
set -g status-fg colour52         # Set status text color

#set -g window-status-separator " ‚éú "
#set -g window-status-separator "‚îÉ"
set -g window-status-separator ""
set -g status-justify left
set -g window-status-format "#[fg=colour88]  #I #W  #[fg=colour111]‚îÉ"
set -w -t :1 window-status-format "#[fg=colour111]‚îÉ#[fg=colour88]  #I #W  #[fg=colour111]‚îÉ"
set -g window-status-current-format '#[fg=colour88]#[fg=colour3]‚ú¶#[fg=colour88] #I #W #{?window_zoomed_flag,üîç, }#[fg=colour111]‚îÉ'
set -w -t :1 window-status-current-format "#[fg=colour111]‚îÉ#[fg=colour3]‚ú¶#[fg=colour88] #I #W #{?window_zoomed_flag,üîç, }#[fg=colour111]‚îÉ"
#set -g status-style "bg=colour124"
set -g message-command-style "fg=colour232,bg=color124"
set -g message-style "fg=colour232,bg=color124"
# Right Status
#set -g status-right "#h"
set -g status-right-length 200
#set -g status-right-style "bg=grey"

# Left Status
set -g status-left "üêß#[fg=colour124] #S #[fg=colour111]‚îÉ#[fg=colour87] #(ip -br a | awk '/UP/{print $3}'| cut -d "/" -f 1) "
set -g status-left-length 200
#set -g status-left-style "bg=grey"
 

# Set window and pane numbering to start at 1 
set -g base-index 1         # Count windows from 1
setw -g pane-base-index 1   # Count panes from 1
set -g renumber-windows on  # Renumber windows after windows close
set -g allow-rename off     # Disable auto-rename


set -g status-keys vi
setw -g mode-keys vi
set -g visual-activity on

set -g mouse on

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Styles for borders single rounded double heavy simple padded none
#bind F1 dislpay-popup -b heavy -S fg=colour125 -h 9 -w 80 -EE ~/Configs/scripts/getname.sh
# Pane border
# Active pane border color
set -g pane-active-border-style 'fg=colour124,bg=colour232'
# set active-inactive window styles
set -g window-style 'fg=colour247,bg=colour233'
set -g window-active-style 'fg=colour15,bg=colour232'

# Pane borders
set -g pane-border-status top
set -g pane-border-format '#{?pane_active,#[bg=default] #[fg=colour246]#[bold]#{pane_index}#[bg=default] #[fg=colour124]#{pane_title}#[bg=default] ,#[fg=red,bg=colour234]#[bold] #{pane_index} #[fg=colour246]#{pane_title} }'
# Active pane border
#set -g pane-active-border-bg default
#set -g pane-active-border-fg blue

# Easy Pane resize
bind-key -r H resize-pane -L "10"
bind-key -r J resize-pane -D "10"
bind-key -r K resize-pane -U "10"
bind-key -r L resize-pane -R "10"

# Smart pane switching with awareness of Vim splits.
is_vim="ps -o state= -o comm= -t '${tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
 bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
 bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
 bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
 bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Move Window
bind-key -r "<" swap-window -d -t -1
bind-key -r ">" swap-window -d -t +1

# Easy rename panes
set -s command-alias[10] rename-pane='command-prompt -p"Change #{pane_title} to: " "select-pane -T '%1'"'
set -s command-alias[11] renp='command-prompt -p"Change #{pane_title} to: " "select-pane -T '%1'"'
unbind-key /
bind-key / rename-pane
# Ensure shell is set
set -g default-shell "/bin/bash"
# Clipboard
set -s set-clipboard external
set -s copy-command 'xsel -i'

# Make middle-mouse-click paste from the primary selection (without having to hold down Shift).
bind-key -n MouseDown2Pane run "tmux set-buffer -b primary_selection \"$(xsel -o)\"; tmux paste-buffer -b primary_selection; tmux delete-buffer -b primary_selection"
# HOOKS
set-hook client-attached 'display-message Welcome User!'
# set-hook after-new-window dislpay-popup -b heavy -S fg=colour125 -h 9 -w 80 -EE ~/Configs/scripts/getname.sh
# interesting 
# #{pane_top} 
